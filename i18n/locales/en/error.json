{
  "boundary": {
    "title": "Error Occurred",
    "alt": "Error Icon",
    "retry": "Retry",
    "reload": "Reload Page",
    "details": "Details",
    "stackTrace": "Component Stack Trace",
    "devMode": "Development Mode",
    "copy": "Copy",
    "noStackInfo": "No stack information"
  },
  "trigger": {
    "title": "üö® Error Boundary Test",
    "description": "Click the button below to trigger an error and observe how ErrorBoundary gracefully handles errors and displays error interface.",
    "features": {
      "title": "Test Features:",
      "items": [
        "Error capture and display",
        "Error retry mechanism",
        "Detailed error information in development",
        "User-friendly error interface"
      ]
    },
    "button": "Trigger Error",
    "errorMessage": "This is a demo error! ErrorBoundary will catch this error."
  },
  "page": {
    "title": "ErrorBoundary Error Boundary Test",
    "subtitle": "Demonstrates how React ErrorBoundary gracefully captures and handles component errors, providing user-friendly error interfaces",
    "headerTitle": "Error Boundary Test",
    "headerSubtitle": "ErrorBoundary Error Handling Demo",
    "basicErrorCapture": "üî• Basic Error Capture",
    "functionDescription": "üìù Function Description",
    "nestedErrorBoundary": "üèóÔ∏è Nested Error Boundary",
    "bestPractices": "üí° ErrorBoundary Best Practices",
    "applicableScenarios": "‚úÖ Applicable Scenarios",
    "uncaughtErrors": "‚ùå Uncaught Errors",
    "areaA": "Area A",
    "areaB": "Area B",
    "areaC": "Area C",
    "description": {
      "intro": "ErrorBoundary is an error handling mechanism introduced in React 16:",
      "captureErrors": "Capture JavaScript errors in child component trees",
      "logErrors": "Log error information for debugging",
      "fallbackUI": "Display fallback UI instead of crashing the entire app",
      "retryMechanism": "Provide error retry mechanism",
      "nestedDemo": "Demonstrates nested ErrorBoundary, showing error isolation capabilities:",
      "isolatedError": "‚≠ê Trigger errors in any area, other areas remain unaffected"
    },
    "scenarios": {
      "thirdParty": "‚Ä¢ Third-party component wrapping",
      "complexModules": "‚Ä¢ Complex functional module isolation",
      "businessProcess": "‚Ä¢ Critical business process protection",
      "productionDegradation": "‚Ä¢ Production environment error degradation"
    },
    "uncaught": {
      "eventHandlers": "‚Ä¢ Errors in event handlers",
      "asyncCode": "‚Ä¢ Asynchronous code (setTimeout, Promise)",
      "ssrErrors": "‚Ä¢ Errors during SSR rendering",
      "boundaryErrors": "‚Ä¢ Errors in ErrorBoundary itself"
    }
  }
}
