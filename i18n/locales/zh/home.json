{
  "title": "功能测试实验室",
  "subtitle": "基于 Next.js 15 + Tailwind CSS 4.x + MobX 的现代前端技术测试平台",
  "technologies": {
    "nextjs": "Next.js 15",
    "tailwind": "Tailwind CSS 4.x",
    "mobx": "MobX",
    "typescript": "TypeScript",
    "i18n": "国际化 (i18n)"
  },
  "cards": {
    "theme": {
      "title": "主题测试",
      "subtitle": "Tailwind CSS 4.x 主题切换",
      "description": "体验 Tailwind CSS 4.x 的多主题切换功能，支持 7 种精美主题，零闪烁切换。",
      "features": {
        "title": "主要特性:",
        "items": [
          "7 种内置主题 + 自定义主题",
          "CSS-First 配置方式",
          "无闪烁主题切换动画",
          "完整的设计令牌系统"
        ]
      },
      "action": "点击体验 →"
    },
    "state": {
      "title": "状态管理",
      "subtitle": "MobX 跨组件状态管理",
      "description": "通过多个独立组件验证 MobX 的跨组件响应式状态管理能力。",
      "features": {
        "title": "测试功能:",
        "items": [
          "跨组件状态同步",
          "计算属性实时更新",
          "状态持久化到本地存储",
          "跨页面状态保持"
        ]
      },
      "action": "点击测试 →"
    },
    "errorBoundary": {
      "title": "ErrorBoundary 错误边界演示",
      "description": "演示 React ErrorBoundary 如何优雅地捕获和处理组件错误",
      "action": "点击按钮触发错误或查看完整功能",
      "learnMore": "📖 了解更多",
      "learnMoreDesc": "ErrorBoundary 是现代 React 应用中重要的错误处理机制，可以防止单个组件的错误影响整个应用。",
      "viewDemo": "查看完整演示 →"
    }
  },
  "architecture": {
    "title": "🏗️ 技术架构特色",
    "features": {
      "tailwind": {
        "title": "Tailwind CSS 4.x",
        "description": "基于 Rust 引擎，构建速度提升 10 倍，支持 CSS-First 配置"
      },
      "mobx": {
        "title": "MobX 状态管理",
        "description": "简单直观的响应式状态管理，自动依赖追踪，最小化重渲染"
      },
      "i18n": {
        "title": "国际化支持",
        "description": "完整的 i18n 解决方案，支持动态语言切换和 SSR 友好"
      }
    }
  },
  "highlights": {
    "title": "✨ 项目亮点",
    "development": {
      "title": "🎯 开发体验优化",
      "items": [
        "TypeScript 完整类型安全",
        "统一的代码规范和格式化",
        "模块化组件架构设计",
        "完整的开发工具链配置"
      ]
    },
    "performance": {
      "title": "🚀 性能与体验",
      "items": [
        "Next.js 15 App Router 最新特性",
        "无闪烁主题切换动画",
        "响应式设计完美适配",
        "状态持久化与恢复机制"
      ]
    }
  },
  "footer": {
    "pageNavigation": "页面导航",
    "times": "次"
  }
}
